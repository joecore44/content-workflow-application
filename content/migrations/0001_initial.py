# Generated by Django 4.1.2 on 2022-11-13 18:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('CLIENT', 'Client'), ('STAFF', 'Staff'), ('ADMIN', 'Admin')], default='ADMIN', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_first_name', models.CharField(default='', max_length=35, verbose_name='Contact First Name')),
                ('admin_last_name', models.CharField(default='', max_length=35, verbose_name='Contact Last Name')),
                ('admin_email', models.CharField(default='', max_length=55, verbose_name='Contact Email')),
                ('company_name', models.CharField(max_length=200)),
                ('company_logo', models.ImageField(blank=True, upload_to='client-media/')),
                ('phone', models.CharField(max_length=200)),
                ('website', models.CharField(max_length=200)),
                ('slug', models.SlugField(default=uuid.uuid1, max_length=200, null=True, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(blank=True, upload_to='staff-media/')),
                ('department', models.CharField(choices=[('sales', 'Sales'), ('marketing', 'Marketing'), ('operations', 'Operations'), ('development', 'Development'), ('management', 'Management')], max_length=20)),
                ('phone', models.CharField(max_length=12)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('blog', 'Blog'), ('video', 'Video'), ('facebook_image', 'Facebook Image Post'), ('facebook_carasel', 'Facebook Carasel Post'), ('instagram_image', 'Instagram Post'), ('instagram_reel', 'Instagram Reel'), ('instagram_story', 'Instagram Story Post'), ('linkedin_post', 'Linkedin Post'), ('twitter_post', 'Twitter Post')], default='facebook_image', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deadline', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending_customer_review', 'Pending Customer Review'), ('pending_customer_revision', 'Pending Customer Revision'), ('published', 'Published'), ('in_design', 'In Design'), ('approved', 'Approved')], default='draft', max_length=25)),
                ('image_1', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_2', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_3', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_4', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_5', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_6', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_7', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_8', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_9', models.ImageField(blank=True, upload_to='post-media/')),
                ('image_10', models.ImageField(blank=True, upload_to='post-media/')),
                ('video_file', models.FileField(blank=True, upload_to='post-media/')),
                ('client', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='content.companyprofile')),
                ('staff', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='content.staffprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('content.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('content.user',),
            managers=[
                ('staff', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
